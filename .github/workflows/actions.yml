# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

# Whenever there is a pull request (PR) or push to the "main" branch, the jobs specified below will run.
on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Here, we specify the automatic cloud based testing that will be ran on pushes/PRs to "main"
jobs:
  master-build-and-test-ubuntu:

    # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
    # Add other OSes like windows and macOS if needed as well as other Python versions  
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.10"]

    steps:
      # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

      # Here we install the package of this repositories as well as other required packages 
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        pip install numpy h5py matplotlib pytest pytest-cov coveralls
        pip install -e .

      # Finally, we run the package unit-tests on the specified OS and python versions
      # and generate the coverage report
    - name: Test with pytest
      run: |
        pytest tests/ --cov=pyslsqp --cov-report lcov
      
    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.COVERALLS_REPO_TOKEN}}
        file: ./coverage.lcov

  build-and-test-macos:
    # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
    # Add other OSes like windows and macOS if needed as well as other Python versions  
    # runs-on: ${{ matrix.os }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

      # Here we install the package of this repositories as well as other required packages 
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        brew reinstall gcc
        pip install numpy h5py matplotlib pytest
        pip install .

      # Finally, we run the package unit-tests on the specified OS and python versions.
    - name: Test with pytest
      run: |
        pytest

  build-and-test-windows:
    # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
    # Add other OSes like windows and macOS if needed as well as other Python versions  
    runs-on: windows-latest

    defaults:
      run:
          shell: bash -el {0}

    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: [ "3.10",]

    steps:
      # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  

    - name: Install mingw-w64 for Windows
      uses: msys2/setup-msys2@v2
      with:
        path-type: inherit
        install: |
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
    
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        update-environment: true

      # Here we install PySLSQP as well as other required packages 
    - name: Install dependencies and PySLSQP
      # shell: cmd
      run: | 
        python -m pip install --upgrade pip
        python -m pip install numpy h5py matplotlib pytest
        pip install -v .
        cat meson_builddir/meson-logs/meson-log.txt

    - name: Download Dependencies Tool
      run: |
        curl -LO https://github.com/lucasg/Dependencies/releases/download/v1.10/Dependencies_x64_Release.zip
        unzip Dependencies_x64_Release.zip -d Dependencies

    - name: Verify compiled files
      run: |
        ls -l pyslsqp
        # List DLL dependencies of the compiled module
        # dumpbin /DEPENDENTS pyslsqp/_slsqp.pyd 
        
        # dump FILE resolved modules
        Dependencies/Dependencies.exe -modules pyslsqp/_slsqp.cp310-win_amd64.pyd
        # dump FILE whole dependency chain
        Dependencies/Dependencies.exe -chain pyslsqp/_slsqp.cp310-win_amd64.pyd
        # dump all the system's known dlls (x86 and x64)
        Dependencies/Dependencies.exe -knowndlls pyslsqp/_slsqp.cp310-win_amd64.pyd


      # Finally, we run the package unit-tests on the specified OS and python versions.
    - name: Test with pytest
      run: |
        pytest