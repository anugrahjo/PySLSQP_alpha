# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

# Whenever there is a pull request (PR) or push to the "main" branch, the jobs specified below will run.
on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Here, we specify the automatic cloud based testing that will be ran on pushes/PRs to "main"
jobs:
  # build-and-test-ubuntu:

  #   # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
  #   # Add other OSes like windows and macOS if needed as well as other Python versions  
  #   # runs-on: ${{ matrix.os }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # os: [ubuntu-latest, windows-latest, macOS-latest]
  #       # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  #       python-version: [ "3.10",]

  #   steps:
  #     # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #     # Here we install the package of this repositories as well as other required packages 
  #   - name: Install dependencies
  #     run: | 
  #       python -m pip install --upgrade pip
  #       if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
  #       pip install -e .

  #     # Finally, we run the package unit-tests on the specified OS and python versions.
  #   - name: Test with pytest
  #     run: |
  #       pytest

  # build-and-test-macos:
  #   # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
  #   # Add other OSes like windows and macOS if needed as well as other Python versions  
  #   # runs-on: ${{ matrix.os }}
  #   runs-on: macos-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # os: [ubuntu-latest, windows-latest, macOS-latest]
  #       # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  #       python-version: [ "3.10",]

  #   steps:
  #     # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #     # Here we install the package of this repositories as well as other required packages 
  #   - name: Install dependencies
  #     run: | 
  #       python -m pip install --upgrade pip
  #       brew reinstall gcc
  #       if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
  #       pip install -e .

  #     # Finally, we run the package unit-tests on the specified OS and python versions.
  #   - name: Test with pytest
  #     run: |
  #       pytest

  build-and-test-windows:
    # The tests will run on ubuntu with python versions 3.8, 3.9, and 3.10.
    # Add other OSes like windows and macOS if needed as well as other Python versions  
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: [ "3.10",]

    steps:
      # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

      # Here we install the package of this repositories as well as other required packages 
    - name: Install dependencies
      shell: cmd
      run: | 
        python -m pip install --upgrade pip
        if exist requirements.txt pip3 install -r requirements.txt
        pip install -e .
        echo %PATH%
        echo "PATH=%PATH%;%CD%\pyslsqp" >> %GITHUB_ENV%
        echo "PATH=%PATH%;%CD%\meson_builddir\pyslsqp" >> %GITHUB_ENV%
        echo %PATH%
        cat meson_builddir/meson-logs/meson-log.txt
        ls meson_builddir/pyslsqp
        ls pyslsqp

      # Finally, we run the package unit-tests on the specified OS and python versions.
    - name: Test with pytest
      run: |
        pytest